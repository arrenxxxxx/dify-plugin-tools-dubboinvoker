identity:
  name: dubbo_invoke
  author: dify
  label:
    en_US: Invoke Dubbo Service
    zh_Hans: 调用Dubbo服务
description:
  human:
    en_US: Call Dubbo services through direct connection or service discovery via registry centers like ZooKeeper.
    zh_Hans: 通过直连或使用ZooKeeper等注册中心调用Dubbo服务。
  llm: Call a Dubbo service by providing either registry center information or direct connection details.
extra:
  python:
    source: tools/dubbo_invoke.py
parameters:
  - name: registry_address
    type: string
    required: false
    label:
      en_US: Registry Address
      zh_Hans: 注册中心地址
    human_description:
      en_US: The address of registry center (e.g. zookeeper://127.0.0.1:2181).
      zh_Hans: 注册中心地址，如 zookeeper://127.0.0.1:2181。
    llm_description: Registry center address in format like zookeeper://host:port.
    form: llm
  - name: service_uri
    type: string
    required: false
    label:
      en_US: Service URI
      zh_Hans: 服务URI
    human_description:
      en_US: The direct URI of the Dubbo service including protocol (e.g. dubbo://127.0.0.1:20880).
      zh_Hans: Dubbo服务的直连URI，包含协议，如 dubbo://127.0.0.1:20880。
    llm_description: Direct service URI in format like protocol://host:port.
    form: llm
  - name: interface
    type: string
    required: true
    label:
      en_US: Interface Name
      zh_Hans: 接口名称
    human_description:
      en_US: The fully qualified name of the Dubbo interface (e.g. com.example.UserService).
      zh_Hans: Dubbo接口的完整名称，如 com.example.UserService。
    llm_description: The fully qualified name of the Dubbo interface.
    form: llm
  - name: method
    type: string
    required: true
    label:
      en_US: Method Name
      zh_Hans: 方法名称
    human_description:
      en_US: The name of the method to call.
      zh_Hans: 要调用的方法名。
    llm_description: The name of the method to call.
    form: llm
  - name: parameter_types
    type: string
    required: false
    label:
      en_US: Parameter Types
      zh_Hans: 参数类型
    human_description:
      en_US: Java types of parameters separated by commas. Supports generic types (e.g. "int,Map<String,Integer>,List<User>").
      zh_Hans: 参数的Java类型，用逗号分隔。支持泛型类型（如"int,Map<String,Integer>,List<User>"）。
    llm_description: Comma-separated Java type names for method parameters. Supports generic types like Map<String,Integer> or List<User>. The parser correctly handles nested brackets, so commas inside generic type declarations are not treated as parameter separators.
    form: llm
  - name: parameter_values
    type: string
    required: false
    label:
      en_US: Parameter Values
      zh_Hans: 参数值
    human_description:
      en_US: JSON representation of parameter values (array for multiple parameters, object for single complex parameter).
      zh_Hans: 参数值的JSON表示（数组表示多个参数，对象表示单个复杂参数）。
    llm_description: JSON representation of parameter values matching the parameter_types.
    form: llm
  - name: params
    type: string
    required: false
    label:
      en_US: Parameters (Legacy)
      zh_Hans: 参数（传统方式）
    human_description:
      en_US: JSON string of parameters for the method (e.g. {"id":123}). Use parameter_types and parameter_values for more complex scenarios.
      zh_Hans: 方法参数的JSON字符串，如 {"id":123}。复杂场景请使用parameter_types和parameter_values参数。
    llm_description: Legacy parameter format. Prefer using parameter_types and parameter_values for better type control.
    form: llm 